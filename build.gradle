import org.jetbrains.kotlin.gradle.dsl.KotlinVersion

plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.kotlin.serialization)
  id("java-gradle-plugin")
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
  alias(libs.plugins.spotless)
  alias(libs.plugins.download)
}

gradlePlugin {
  plugins {
    licensee {
      id = "app.cash.licensee"
      displayName = "Licensee"
      description = "Gradle plugin which validates the licenses of your dependency graph match what you expect"
      implementationClass = "app.cash.licensee.LicenseePlugin"
    }
  }
}

tasks.named("validatePlugins") {
  enableStricterValidation = true
}

dependencies {
  compileOnly gradleApi()
  compileOnly libs.androidGradlePlugin
  compileOnly libs.kotlinGradlePlugin
  implementation libs.kotlinx.serialization
  implementation libs.maven.modelBuilder

  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.testParameterInjector
  testImplementation gradleTestKit()
}

kotlin {
  jvmToolchain(11)
  target {
    compilations.configureEach {
      // Ensure compatibility with old Gradle versions running Kotlin 1.4.
      // When changing this value see kotlinCompatibility.kt and delete unnecessary backports.
      compilerOptions.options.apiVersion.set(KotlinVersion.KOTLIN_1_4)
    }
  }
}

tasks.named("test") {
  dependsOn(':publishAllPublicationsToTestingRepository')
  systemProperty('licenseeVersion', VERSION_NAME)
  systemProperty('line.separator', '\n')

  testLogging {
    if (System.getenv("CI") == "true") {
      events = ["failed", "skipped", "passed"]
    }
    exceptionFormat "full"
  }
}

def fixtures = file('src/test/fixtures')
def minimalJarBase64 = 'UEsFBgAAAAAAAAAAAAAAAAAAAAAAAA=='
tasks.register('writeFixtureJars') { task ->
  task.doFirst {
    fixtures.eachFileRecurse { File file ->
      if (file.toString().contains('/repo/') && file.name.endsWith('.jar')) {
        file.bytes = minimalJarBase64.decodeBase64()
      }
    }
  }
}
def checkFixtureJars = tasks.register('checkFixtureJars') { task ->
  task.doFirst {
    fixtures.eachFileRecurse { File file ->
      if (file.toString().contains('/repo/') && file.name.endsWith('.jar')) {
        def fileBase64 = file.readBytes().encodeBase64().toString()
        if (fileBase64 != minimalJarBase64) {
          throw new RuntimeException(
            "Expected '$minimalJarBase64' but was '$fileBase64'\n\n" +
              "Invoke 'writeFixtureJars' task to fix.")
        }
      }
    }
  }
}

tasks.named('check') { check ->
  check.dependsOn(checkFixtureJars)
}

tasks.register('updateLicenses', de.undercouch.gradle.tasks.download.Download) { task ->
  task.src('https://spdx.org/licenses/licenses.json')
  task.dest(file('src/main/resources/app/cash/licensee'))
}

publishing {
  repositories {
    maven {
      name = "testing"
      url = "${rootProject.projectDir}/build/localMaven"
    }
  }
}

spotless {
  kotlin {
    target('**/*.kt')
    ktlint('0.48.1').editorConfigOverride([
      'ktlint_standard_filename': 'disabled',
    ])
    licenseHeaderFile(rootProject.file('gradle/license-header.txt'))
  }
}
