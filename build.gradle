buildscript {
  dependencies {
    classpath libs.kotlinGradlePlugin
    classpath libs.kotlinSerializationPlugin
    classpath libs.spotlessPlugin
    classpath libs.gradleMavenPublishPlugin
    classpath libs.dokkaPlugin
    classpath libs.downloadPlugin
  }

  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply plugin: 'java-gradle-plugin'

gradlePlugin {
  plugins {
    licensee {
      id = "app.cash.licensee"
      displayName = "Licensee"
      description = "Gradle plugin which validates the licenses of your dependency graph match what you expect"
      implementationClass = "app.cash.licensee.LicenseePlugin"
    }
  }
}

tasks {
  validatePlugins {
    enableStricterValidation = true
  }
}

dependencies {
  compileOnly gradleApi()
  compileOnly libs.androidGradlePlugin
  compileOnly libs.kotlinGradlePlugin
  implementation libs.kotlinx.serialization
  implementation libs.maven.modelBuilder

  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.testParameterInjector
  testImplementation gradleTestKit()
}

repositories {
  mavenCentral()
  google()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    // Ensure compatibility with old Gradle versions running Kotlin 1.4.
    // When changing this value see kotlinCompatibility.kt and delete unnecessary backports.
    apiVersion = '1.4'
  }
}

test {
  dependsOn(':publishAllPublicationsToTestingRepository')
  systemProperty('licenseeVersion', VERSION_NAME)

  testLogging {
    if (System.getenv("CI") == "true") {
      events = ["failed", "skipped", "passed"]
    }
    exceptionFormat "full"
  }
}

def fixtures = file('src/test/fixtures')
def minimalJarBase64 = 'UEsFBgAAAAAAAAAAAAAAAAAAAAAAAA=='
tasks.register('writeFixtureJars') { task ->
  task.doFirst {
    fixtures.eachFileRecurse { File file ->
      if (file.toString().contains('/repo/') && file.name.endsWith('.jar')) {
        file.bytes = minimalJarBase64.decodeBase64()
      }
    }
  }
}
def checkFixtureJars = tasks.register('checkFixtureJars') { task ->
  task.doFirst {
    fixtures.eachFileRecurse { File file ->
      if (file.toString().contains('/repo/') && file.name.endsWith('.jar')) {
        def fileBase64 = file.readBytes().encodeBase64().toString()
        if (fileBase64 != minimalJarBase64) {
          throw new RuntimeException(
            "Expected '$minimalJarBase64' but was '$fileBase64'\n\n" +
              "Invoke 'writeFixtureJars' task to fix.")
        }
      }
    }
  }
}
tasks.named('check').configure { check ->
  check.dependsOn(checkFixtureJars)
}

tasks.register('updateLicenses', de.undercouch.gradle.tasks.download.Download) { task ->
  task.src('https://spdx.org/licenses/licenses.json')
  task.dest(file('src/main/resources/app/cash/licensee'))
}

apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka'
publishing {
  repositories {
    maven {
      name = "testing"
      url = "${rootProject.buildDir}/localMaven"
    }
  }
}

apply plugin: 'com.diffplug.spotless'
spotless {
  kotlin {
    target('**/*.kt')
    ktlint('0.48.1').editorConfigOverride([
      'ktlint_standard_filename': 'disabled',
    ])
    licenseHeaderFile(rootProject.file('gradle/license-header.txt'))
  }
}
